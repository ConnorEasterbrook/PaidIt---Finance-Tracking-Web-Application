@{
    ViewData["Title"] = "Home Page";
    var currency = "GBP";
}

@using Microsoft.AspNetCore.Components;
@using Microsoft.JSInterop;

@* TODO:
1. Install IronPython
2. Use Python to retrieve, store, and analyse data on all inputted data
2a. Make it so Python creates an initial .JSON file and then saves information to it
2b. Allow users to attach their .JSON file to be overwritten
2c. Start with basic analysis like predicted amounts at the 1st of their individual next month
2d. Create financial reports in a .PDF format that users can download
3. Allow for each made account to have its own page and statistics
4. Tidy dashboard so that it looks professional and offers all information at a glance
*@

<div id="root">
    <div id="container">
        <div id="heading">
            <div>
                <h1>Accounts</h1>
            </div>
            <div id="content">
                <button type="button" class="account" id="accountOne">ACCOUNT</button>
                <button type="button" class="account" onclick="AddAccount()">Add Account</button>
            </div>
            <div>
                <h1>Summary</h1>
                <h2>
                    £0.00
                </h2>
            </div>
        </div>

        <div id="heading">
            <h1>Financial History</h1>
        </div>

        <div class="financeInfo">
            <button type="button" class="smallButton" onclick="UpdateData(6)">6 Months</button>
            <button type="button" class="smallButton" onclick="UpdateData(12)">Year</button>
            <button type="button" class="smallButton" onclick="UpdateData(60)">5 Years</button>
            <button type="button" id="allTimeButton" class="smallButton" onclick="UpdateData(0)">All Time</button>
        </div>

        <div>
            <h3><br>FINANCIAL CHART</h3>
        </div>

        <div id="chart">
            <canvas id="myChart" width="600" height="400"></canvas>
        </div>

        <h2>Balance Change:</h2>
        <h3>+/- £0.00</h3>
    </div>

    <div class="form-group">
        <label for="accountName">Account Name:</label>
        <input type="text" class="form-control" id="accountName" placeholder="Enter account name">
    </div>
    <div class="form-group">
        <label for="amount">Amount:</label>
        <input type="number" class="form-control" id="amount" placeholder="Enter amount">
    </div>
    <div class="form-group">
        <label for="date">Date:</label>
        <input type="date" class="form-control" id="date">
    </div>
    <button type="button" class="btn btn-primary" onclick="AddData()">Add Data</button>

    <script>
        var chart;
        var accounts = [];

        window.onload = InitializeChart;

        function InitializeChart()
        {
            chart = new Chart(document.getElementById("myChart"), {
                type: 'line',
                data: {
                    labels: [],
                    datasets: []
                },
                options: {
                    responsive: true,
                    plugins: {
                        tooltip: {
                            mode: 'index'
                        },
                        legend: {
                            labels: {
                                font: {
                                    size: 20
                                }
                            }
                        }
                    },
                    interaction: {
                        mode: 'nearest',
                        axis: 'x',
                        intersect: false
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Month',
                                font: {
                                    size: 20
                                }
                            },
                            ticks: {
                                font: {
                                    size: 20,
                                },
                                color: 'rgb(209, 209, 209)'
                            }
                        },
                        y: {
                            beginAtZero: true,
                            stacked: true,
                            title: {
                                display: true,
                                text: 'Total Money',
                                font: {
                                    size: 20
                                }
                            },
                            ticks: {
                                callback: function (value, index, values)
                                {
                                    if ('@currency' === "USD")
                                    {
                                        return '$' + value;
                                    } else if ('@currency' === "GBP")
                                    {
                                        return '£' + value;
                                    }
                                },
                                font: {
                                    size: 20
                                },
                                color: 'rgb(209, 209, 209)'
                            }
                        }
                    }
                }
            });

            UpdateData();
        }

        function AddAccount()
        {
            const accountName = prompt("Enter the name of the account:");
            if (accountName)
            {
                const accountData = {
                    name: accountName,
                    label: accountName,
                    data: [],
                    borderColor: "#6b6b6b",
                    backgroundColor: GetRandomColour(),
                    fill: true,
                };
                chart.data.datasets.push(accountData);
                chart.update();

                accounts.push(accountData);
            }
        }

        function GetRandomColour()
        {
            const letters = '0123456789ABCDEF';
            let colour = '#';
            for (let i = 0; i < 6; i++)
            {
                colour += letters[Math.floor(Math.random() * 16)];
            }
            return colour;
        }

        function AddData()
        {
            const accountName = document.getElementById("accountName").value;
            const amount = parseFloat(document.getElementById("amount").value);
            const date = document.getElementById("date").value;

            const accountIndex = accounts.findIndex(account => account.name === accountName);
            if (accountIndex === -1)
            {
                alert(`Account ${accountName} does not exist`);
                return;
            }

            if (isNaN(amount))
            {
                alert("Please enter a valid amount");
                return;
            }

            const parsedDate = Date.parse(date);
            if (isNaN(parsedDate))
            {
                alert("Please enter a valid date");
                return;
            }

            const accountData = chart.data.datasets[accountIndex].data;
            const label = chart.data.datasets[accountIndex].label;
            const index = accountData.findIndex(data => data.x === parsedDate);
            if (index !== -1)
            {
                accountData[index].y += amount;
            } else
            {
                accountData.push({ x: parsedDate, y: amount });
            }

            chart.update();
        }

        function UpdateData(months = 12)
        {
            const now = new Date();
            let startDate, endDate;

            let allTimeButton = document.getElementById("allTimeButton");

            if (chart.data.datasets.length === 0)
            {
                allTimeButton.style.backgroundColor = "rgb(209, 209, 209)";
                allTimeButton.style.opacity = "0.5";
                allTimeButton.disabled = true;
            }
            else
            {
                allTimeButton.disabled = false;
            }

            if (months === 0)
            {
                const firstDate = new Date(chart.data.datasets[0].data[0].x);
                startDate = new Date(firstDate.getFullYear(), firstDate.getMonth(), 1);
                endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);
            }
            else
            {
                startDate = new Date(now.getFullYear() - Math.floor(months / 12), now.getMonth() - (months % 12) + 1, 1);
                endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);
            }

            $("#myChart").fadeOut(200, function ()
            {
                chart.data.labels = GetMonthLabels(startDate, endDate);
                chart.data.datasets.forEach((dataset) =>
                {
                    dataset.data = GetAccountData(dataset, startDate, endDate);
                });

                chart.update();

                $("#myChart").fadeIn(200);
            });
        }

        function GetMonthLabels(startDate, endDate)
        {
            const labels = [];

            for (let d = startDate; d <= endDate; d.setMonth(d.getMonth() + 1))
            {
                labels.push(d.toLocaleString('default', { month: 'long', year: 'numeric' }));
            }

            return labels;
        }

        function GetAccountData(account, startDate, endDate)
        {
            const data = [];

            for (let d = startDate; d <= endDate; d.setMonth(d.getMonth() + 1))
            {
                const index = account.data.findIndex(data => data.x.toLocaleString('default', { month: 'long', year: 'numeric' }) === d.toLocaleString('default', { month: 'long', year: 'numeric' }));
                if (index !== -1)
                {
                    data.push({ x: d, y: account.data[index].y });
                } else
                {
                    data.push({ x: d, y: 0 });
                }
            }

            return data;
        }
    </script>
</div>