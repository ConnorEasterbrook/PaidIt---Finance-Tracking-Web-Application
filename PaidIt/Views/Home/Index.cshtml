@{
    ViewData["Title"] = "Home Page";
}

@using Microsoft.AspNetCore.Components;
@using Microsoft.JSInterop;

@* Primary TODO:
== FREE==
1. Tidy dashboard so that it looks professional and offers all information at a glance (App must look nice obviously)

== PAID ==
?2. Create financial reports in a .PDF format that users can download (Maybe not needed because who is going to be printing off their finances? Might just be worth making a page showing all data inputs)
?3. Use Python to analyse data on all inputted data (Analysis is not necessarily needed. Beginner use of it could just be expected next amount base on past few data inputs)

# Future plans:
Develop further into a free and a paid version of the app...

Free version has the inputs and data showing, as well as saving goal creators (How much per month/week to put away to achieve result by deadline) as a basic finance assistant app.

Paid version taking into account the user's income and outgoings to create what is essentially a monthly statement that allows the user to allocate whatever is left to put into the savings goals
in order to update them in real time. Effectively going from a simple data representation app to a real finance assistant app.
*@

@*
    TODO:
    - Tidy Dashboard to look nice. Make input popup and have a fold out section under
    "advanced" that shows the UserData.json upload input.
    - Make the account colour match the chart colour
    - Make it so the colours are set and not randomized every time. Might need to be stored
    in the JSON.
    - Link buttons on bottom to different pages
    - Allow creation of basic "goals" with the information, again, stored in the JSON.
*@

<div id="root">
    <div id="container">
        <div id="heading">
            <h1>PaidIt</h1>
            <h2>ACCOUNTS</h2>
            <div id="accountsContainer">
                <button type="button" onclick="AddAccount()">Add Account</button>
            </div>
        </div>

        <!-- <div id="heading">
            <h1>Financial History</h1>
        </div>

         <div class="financeInfo">
            @*<button type="button" class="smallButton" onclick="UpdateData(6)">6 Months</button>
            <button type="button" class="smallButton" onclick="UpdateData(12)">Year</button>
            <button type="button" class="smallButton" onclick="UpdateData(60)">5 Years</button>*@
            <button type="button" id="allTimeButton" class="smallButton" onclick="UpdateData(0)">All Time</button>
        </div> -->

        <div>
            <h3><br>FINANCIAL CHART</h3>
        </div>

        <div id="chart">
            <canvas id="myChart" width="600" height="400"></canvas>
        </div>
    </div>

    <div>
        <div class="form-group">
            <label for="accountName">Account Name:</label>
            <input type="text" class="form-control" id="accountName" placeholder="Enter account name">
        </div>
        <div class="form-group">
            <label for="amount">Amount:</label>
            <input type="number" class="form-control" id="amount" placeholder="Enter amount">
        </div>
        <div class="form-group">
            <label for="date">Date:</label>
            <input type="date" class="form-control" id="date">
        </div>
        <button type="button" class="btn btn-primary" onclick="AddData()">Add Data</button>
    </div>

    <div>
        <form method="post" enctype="multipart/form-data" asp-controller="Home" asp-action="OverwriteUserdata">
            <div class="form-group">
                <label for="file">Upload userdata.JSON file</label>
                <input type="file" id="file" name="userdataJSON">
            </div>
            <button type="submit" class="btn btn-default">Upload</button>
        </form>
    </div>

    <script>
        // Get the data from chartData in HomeController
        window.onload = function () {
            var jsonData = '@Html.Raw(Json.Serialize(ViewBag.ChartData))';
            const data = JSON.parse(jsonData);
            InitializeChart(data);
        };
    </script>
</div>