@{
    ViewData["Title"] = "Home Page";
    var currency = "GBP";
}

@using Microsoft.AspNetCore.Components;
@using Microsoft.JSInterop;

@* TODO:
2. Use Python to retrieve, store, and analyse data on all inputted data
2a. Make it so Python creates an initial .JSON file and then saves information to it
2b. Allow users to attach their .JSON file to be overwritten
2c. Start with basic analysis like predicted amounts at the 1st of their individual next month
2d. Create financial reports in a .PDF format that users can download
3. Allow for each made account to have its own page and statistics
4. Tidy dashboard so that it looks professional and offers all information at a glance
5. Allow for interest calculations & expenses
*@

<div id="root">
    <div id="container">
        <div id="heading">
            <div>
                <h1>Accounts</h1>
            </div>
            <div id="accountsContainer">
                <button type="button" class="account" onclick="AddAccount()">Add Account</button>
            </div>
            <div>
                <h1>Summary</h1>
                <h2>
                    £0.00
                </h2>
            </div>
        </div>

        <div id="heading">
            <h1>Financial History</h1>
        </div>

        <div class="financeInfo">
            @*<button type="button" class="smallButton" onclick="UpdateData(6)">6 Months</button>
            <button type="button" class="smallButton" onclick="UpdateData(12)">Year</button>
            <button type="button" class="smallButton" onclick="UpdateData(60)">5 Years</button>*@
            <button type="button" id="allTimeButton" class="smallButton" onclick="UpdateData(0)">All Time</button>
        </div>

        <div>
            <h3><br>FINANCIAL CHART</h3>
        </div>

        <div id="chart">
            <canvas id="myChart" width="600" height="400"></canvas>
        </div>

        <h2>Balance Change:</h2>
        <h3>+/- £0.00</h3>
    </div>

    <div class="form-group">
        <label for="accountName">Account Name:</label>
        <input type="text" class="form-control" id="accountName" placeholder="Enter account name">
    </div>
    <div class="form-group">
        <label for="amount">Amount:</label>
        <input type="number" class="form-control" id="amount" placeholder="Enter amount">
    </div>
    <div class="form-group">
        <label for="date">Date:</label>
        <input type="date" class="form-control" id="date">
    </div>
    <button type="button" class="btn btn-primary" onclick="AddData()">Add Data</button>

    <script>
        var chart;
        let accounts = [];

        // Get the data from chartData in HomeController
        window.onload = function ()
        {
            var jsonData = '@Html.Raw(Json.Serialize(ViewBag.ChartData))';
            const data = JSON.parse(jsonData);
            InitializeChart(data);
        };

        function InitializeChart(data)
        {
            accounts = data.Accounts;
            var datasets = [];

            for (var accountName in accounts)
            {
                // Check if the account has any data
                if (accounts[accountName].Inputs.length === 0)
                {
                    continue;
                }

                // Get the data for the account
                var accountData = accounts[accountName].Inputs;
                var dataPoints = [];

                for (var i = 0; i < accountData.length; i++)
                {
                    var date = new Date(accountData[i].Date);
                    var amount = accountData[i].Amount;

                    dataPoints.push({ x: date, y: amount });
                }

                var dataset = {
                    label: accountName,
                    data: dataPoints,
                    borderColor: "#6b6b6b",
                    backgroundColor: GetRandomColour(),
                    fill: true,
                };

                datasets.push(dataset);
            }

            chart = new Chart(document.getElementById("myChart"), {
                type: 'line',
                data: {
                    labels: [],
                    datasets: datasets,
                },
                options: {
                    responsive: true,
                    plugins: {
                        tooltip: {
                            mode: 'index'
                        },
                        legend: {
                            labels: {
                                font: {
                                    size: 20
                                }
                            }
                        }
                    },
                    interaction: {
                        mode: 'nearest',
                        axis: 'x',
                        intersect: false
                    },
                    scales: {
                        x: {
                            title: {
                                display: true,
                                text: 'Month',
                                font: {
                                    size: 20
                                }
                            },
                            ticks: {
                                font: {
                                    size: 20,
                                },
                                color: 'rgb(209, 209, 209)'
                            }
                        },
                        y: {
                            beginAtZero: true,
                            stacked: true,
                            title: {
                                display: true,
                                text: 'Total Money',
                                font: {
                                    size: 20
                                }
                            },
                            ticks: {
                                callback: function (value, index, values)
                                {
                                    if ('@currency' === "USD")
                                    {
                                        return '$' + value;
                                    } else if ('@currency' === "GBP")
                                    {
                                        return '£' + value;
                                    }
                                },
                                font: {
                                    size: 20
                                },
                                color: 'rgb(209, 209, 209)'
                            }
                        }
                    }
                }
            });

            // Add the accounts to the accounts container
            const accountsContainer = document.getElementById("accountsContainer");
            for (var accountName in accounts)
            {
                const accountData = {
                    name: accountName,
                    label: accountName,
                    data: accounts[accountName].Inputs,
                    borderColor: "#6b6b6b",
                    backgroundColor: GetRandomColour(),
                    fill: true,
                };

                const accountButton = CreateAccountButton(accountData);
                accountsContainer.appendChild(accountButton);
            }

            UpdateData();
        }

        function AddAccount()
        {
            const accountName = prompt("Enter the name of the account:");
            if (accountName)
            {
                // Check if the account already exists
                if (accounts[accountName])
                {
                    alert("An account with that name already exists.");
                    return;
                }

                const accountData = {
                    name: accountName,
                    label: accountName,
                    data: [],
                    borderColor: "#6b6b6b",
                    backgroundColor: GetRandomColour(),
                    fill: true,
                };
                chart.data.datasets.push(accountData);
                chart.update();

                // Add new account to the accounts array
                accounts[accountName] = {
                    Inputs: []
                };

                const accountsContainer = document.getElementById("accountsContainer");
                const accountButton = CreateAccountButton(accountData);
                accountsContainer.appendChild(accountButton);

                // Make an AJAX request to the SendNewAccount action using jQuery
                $.ajax({
                    url: "/Home/SendNewAccount",
                    type: "POST",
                    data: { accountName: accountName },
                    success: function (result)
                    {
                        alert("Success");
                    },
                    error: function (xhr, textStatus, errorThrown)
                    {
                        alert("An error occurred while calling the C# function.");
                    }
                });
            }
        }

        function CreateAccountButton(account)
        {
            const button = document.createElement("button");
            button.type = "button";
            button.className = "account";
            button.innerText = account.name;
            button.style.backgroundColor = account.backgroundColor;
            button.onclick = function ()
            {
                // do something when the button is clicked
            };
            return button;
        }

        function GetRandomColour()
        {
            const letters = '0123456789ABCDEF';
            let colour = '#';
            for (let i = 0; i < 6; i++)
            {
                colour += letters[Math.floor(Math.random() * 16)];
            }
            return colour;
        }

        function AddData()
        {
            const accountName = document.getElementById("accountName").value;
            const amount = parseFloat(document.getElementById("amount").value);
            const date = document.getElementById("date").value;

            const accountIndex = chart.data.datasets.findIndex(dataset => dataset.label === accountName);
            if (accountIndex === -1)
            {
                alert(`Account ${accountName} does not exist`);
                return;
            }

            if (isNaN(amount))
            {
                alert("Please enter a valid amount");
                return;
            }

            const parsedDate = Date.parse(date);
            if (isNaN(parsedDate))
            {
                alert("Please enter a valid date");
                return;
            }

            const accountData = chart.data.datasets[accountIndex].data;
            const label = chart.data.datasets[accountIndex].label;
            const index = accountData.findIndex(data => data.x === parsedDate);
            if (index !== -1)
            {
                accountData[index].y += amount;
            } else
            {
                accountData.push({ x: parsedDate, y: amount });
            }

            chart.update();

            console.log(accountName, amount, date);

            // Make an AJAX request to the SendNewData action using jQuery
            $.ajax({
                url: "/Home/SendNewData",
                type: "POST",
                data: { accountName: accountName, date: date, amount: amount },
                success: function (result)
                {
                    alert("Success");
                },
                error: function (xhr, textStatus, errorThrown)
                {
                    alert("An error occurred while calling the C# function.");
                }
            });
        }

        let previousMonth = 1;

        function UpdateData(months = 0)
        {
            if (previousMonth === months)
            {
                return;
            }
            previousMonth = months;

            const now = new Date();
            let startDate, endDate;

            // Calculate the start and end dates based on the selected time span
            if (months === 0)
            { 
                // all time
                startDate = new Date(chart.data.datasets[0].data[0].x);
                endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);
            } 
            else
            {
                startDate = new Date(now.getFullYear() - Math.floor(months / 12), now.getMonth() - (months % 12) + 1, 1);
                endDate = new Date(now.getFullYear(), now.getMonth() + 1, 0);
            }

            // Filter the data points for each account based on the selected time span
            chart.data.datasets.forEach((dataset) =>
            {
                dataset.data = dataset.data.filter((data) =>
                {
                    const dataDate = new Date(data.x);
                    return dataDate >= startDate && dataDate <= endDate;
                });
            });

            // Fill in any missing data points
            const datasetLabels = chart.data.datasets.map((dataset) => dataset.label);
            for (let i = 0; i < datasetLabels.length; i++)
            {
                const dataset = chart.data.datasets[i];
                const dataPoints = dataset.data;
                let emptyMonthValue = null;

                for (let j = 0; j < chart.data.labels.length; j++)
                {
                    const label = chart.data.labels[j];

                    if (!dataPoints.some((data) => new Date(data.x).toLocaleString('default', { month: 'long', year: 'numeric' }) === label))
                    {
                        if (emptyMonthValue === null)
                        {
                            emptyMonthValue = 0;
                            for (let k = 0; k < datasetLabels.length; k++)
                            {
                                const otherDataset = chart.data.datasets[k];
                                const otherDataPoints = otherDataset.data;
                                const otherDataPoint = otherDataPoints.find((data) => new Date(data.x).toLocaleString('default', { month: 'long', year: 'numeric' }) === label);
                                if (otherDataPoint)
                                {
                                    emptyMonthValue += otherDataPoint.y;
                                }
                            }
                        }
                        dataPoints.push({ x: new Date(now.getFullYear() - Math.floor(months / 12) + Math.floor(j / 12), (now.getMonth() - (months % 12) + 1 + j) % 12, 1), y: emptyMonthValue });
                    }
                }
            }

            // Update the labels on the x-axis based on the selected time span
            chart.data.labels = GetMonthLabels(startDate, endDate);

            // Update the chart
            chart.update();
        }

        function GetMonthLabels(startDate, endDate)
        {
            const labels = [];

            for (let d = startDate; d <= endDate; d.setMonth(d.getMonth() + 1))
            {
                labels.push(d.toLocaleString('default', { month: 'long', year: 'numeric' }));
            }

            return labels;
        }
    </script>
</div>